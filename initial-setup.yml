---
#ansible-playbook -s initial-setup.yml -u root --vault-password-file vault_pass.txt
- hosts: web
  vars_files: 
    - vault.yml #vault file contains deploy_user_password and dbpassword
  vars:
    app_name: menu
    logwatch_email: aplucche@gmail.com
    repo_name: https://github.com/aplucche/menu.git
    deploy_user_name: deploy
    #deploy_user_password: stored in vault.yml
    public_keys:
      - ~/.ssh/id_rsa.pub
    required_packages:
      - ufw
      - fail2ban
      - logwatch
      - vim
      - postgresql
      - libpq-dev
      - python-psycopg2
      - git
      - nodejs
      - nodejs-legacy
      - npm
      - supervisor
    open_ports: [22, 80, 8080]

    #Go vars
    go_download_location: "http://golang.org/dl/go1.5.1.linux-amd64.tar.gz"
    go_tarball: "go1.5.1.linux-amd64.tar.gz"
    go_tarball_checksum: "2593132ca490b9ee17509d65ee2cd078441ff544899f6afb97a03d08c25524e7"
    go_version_target: "go version go1.5.1 linux/amd64"

    #PG vars
    dbname: golang
    dbuser: golang
    #dbpassword: stored in vault.yml

    project_directories:
      - /usr/local/projects/bin
      - /usr/local/projects/src
      - /usr/local/projects/pkg

    global_npm_packages:
      - browserify
      - uglify-js

  tasks:
    #Initial setup
    - name: Update APT package cache
      apt: update_cache=yes cache_valid_time=3600

    - name: Upgrade APT to the latest packages
      apt: upgrade=safe

    - name: Install Nginx
      apt: pkg=nginx state=installed
      register: nginxinstalled
      notify:
        - Start Nginx

    - name: Install apt packages
      apt: state=installed pkg={{ item }}
      with_items: required_packages

    - name: Disallow password authentication
      lineinfile: dest=/etc/ssh/sshd_config
                  regexp="^PasswordAuthentication"
                  line="PasswordAuthentication no"
                  state=present
      notify: Restart ssh

    #Add deploy user
    - name: Add deploy user
      user: name={{ deploy_user_name }} password="{{ deploy_user_password }}" shell=/bin/bash

    - name: Add authorized keys for deploy user
      authorized_key: user={{ deploy_user_name }}
                  key="{{ lookup('file', item) }}"
      with_items: public_keys

    - name: Add deploy user to sudoers
      lineinfile: dest=/etc/sudoers
                  regexp="{{ deploy_user_name }} ALL"
                  'line="{{ deploy_user_name }} ALL=(ALL) NOPASSWD:ALL"'
                  state=present

    #Set up firewall
    - name: Allow ssh traffic
      ufw: rule=allow port={{ item }} proto=tcp
      with_items: open_ports

    - name: Setup ufw
      ufw: state=enabled policy=deny

    #Set up logwatch
    - name: Set up Postfix to relay mail
      debconf: name=postfix
               question='{{ item.question }}'
               value='{{ item.value }}'
               vtype='{{ item.vtype }}'
      with_items:
        - { question: 'postfix/mailname', value: '{{ ansible_fqdn }}', vtype: 'string' }
        - { question: 'postfix/main_mailer_type', value: 'Internet Site', vtype: 'string' }

    - name: Email log summary daily
      lineinfile: dest=/etc/cron.daily/00logwatch
                  regexp="^/usr/sbin/logwatch"
                  line="/usr/sbin/logwatch --output mail --mailto {{ logwatch_email }} --detail high"
                  state=present create=yes

    #Install Go
    - name: Download the Go tarball
      get_url: url={{ go_download_location }}
               dest=/usr/local/src/{{ go_tarball }}
               sha256sum={{ go_tarball_checksum }}

    - name: Register the current Go version (if any)
      command: /usr/local/go/bin/go version
      ignore_errors: yes
      register: go_version
      changed_when: false

    - name: Extract the Go tarball if Go is not yet installed or if it is not the desired version
      command: tar -C /usr/local -xf /usr/local/src/{{ go_tarball }}
      when: go_version|failed or go_version.stdout != go_version_target

    - name: Add the Go bin directory to PATH for all users
      copy: src=files/go-bin.sh
            dest=/etc/profile.d

    - name: Set GOPATH for all users
      copy: src=files/go-path.sh
            dest=/etc/profile.d

    - name: Create go project directory
      file: path={{item}} state=directory mode=0755 owner={{deploy_user_name}} recurse=yes
      with_items: '{{project_directories}}'

    - name: Clone project repo
      git:  repo={{repo_name}}
            dest=/usr/local/projects/src/{{app_name}}
            force=yes
      register: repo

    #Install Postgres and add user
    - name: ensure database is created
      become_user: postgres
      postgresql_db: name={{dbname}}

    - name: ensure postgres user has access to database
      become_user: postgres
      postgresql_user: db={{dbname}} name={{dbuser}} password={{dbpassword}} priv=ALL

    - name: ensure postgres user is not superuser
      become_user: postgres
      postgresql_user: name={{dbuser}} role_attr_flags=NOSUPERUSER

    - name: ensure postgres user cannot create databases
      become_user: postgres
      postgresql_user: name={{dbuser}} role_attr_flags=NOCREATEDB

    #install npm packages
    - name: Install global npm packages
      npm: name={{item}} global=yes
      with_items: '{{global_npm_packages}}'

    - name: Install npm packages from package.json
      npm: path=/usr/local/projects/src/{{app_name}}
      when: repo.changed

    - name: Run npm build script
      command: npm run build
      args:
        chdir: /usr/local/projects/src/{{app_name}}
      when: repo.changed

    #Run app using supervisor
    - name: Copy supervisor config template
      template: 
            src=files/supervisor.j2
            dest=/etc/supervisor/conf.d/{{app_name}}.conf

    - name: Reload Supervisor config files
      command: sudo supervisorctl reread
      become: yes
      become_method: sudo
      become_user: '{{deploy_user_name}}'
      when: repo.changed

    - name: Update Supervisor
      command: sudo supervisorctl update
      become: yes
      become_method: sudo
      become_user: '{{deploy_user_name}}'
      when: repo.changed

    #Configure Nginx
    - name: Copy nginx config template
      template: 
            src=files/nginx-config.j2
            dest=/etc/nginx/sites-available/{{app_name}}.conf

    - name: Disable default site
      when: nginxinstalled.changed
      file: dest=/etc/nginx/sites-enabled/default state=absent

    - name: Create link in nginx sites-enabled
      file: 
            src=/etc/nginx/sites-available/{{app_name}}.conf
            dest=/etc/nginx/sites-enabled/{{app_name}}.conf
            state=link
      notify: Reload Nginx

  handlers:
    - name: Start Nginx
      service: name=nginx state=started

    - name: Reload Nginx
      service: name=nginx state=reloaded

    - name: Restart ssh
      service: name=ssh state=restarted